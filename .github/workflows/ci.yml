name: CI/CD Pipeline

on:
  push:
    branches: [master, main]
  pull_request:
    branches: [master, main]

jobs:
  test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Run tests
        run: npm test -- --coverage --watchAll=false

      - name: Build application
        run: npm run build

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        if: matrix.node-version == '20.x'
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build for production
        run: npm run build

      - name: Build Docker image
        run: docker build -t fcse-assessment:${{ github.sha }} .

  deploy-to-vps:
    needs: build-and-deploy
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'

    steps:
      - name: Deploy to VPS
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_PORT }}
          script: |
            # Navigate to project directory
            cd /var/www/${{ secrets.PROJECT_DIRECTORY }}
            
            # Pull latest changes
            echo "üîÑ Pulling latest changes..."
            git pull origin master
            
            # Stop existing container
            echo "üõë Stopping existing container..."
            docker-compose down || true
            
            # Remove old images to free up space
            echo "üßπ Cleaning up old images..."
            docker image prune -f
            
            # Build and start new container
            echo "üî® Building and starting new container..."
            docker-compose up -d --build
            
            # Wait for container to start
            sleep 10
            
            # Check if container is running
            if docker-compose ps | grep -q "Up"; then
              echo "‚úÖ Deployment successful!"
              echo "üåê App is running on port 3002"
            else
              echo "‚ùå Deployment failed!"
              docker-compose logs
              exit 1
            fi
            
            # Show container status
            docker-compose ps